---
import BaseLayout from '../layouts/BaseLayout.astro';

const { dentist } = Astro.props;
---

<div class="lead-form-container">
  <h2 class="contact-form-title">Book an Appointment</h2>
    <p class="contact-form-subtitle">with <span class="bold">{dentist.name}</span></p>
  <form id="lead-form" data-dentist={JSON.stringify(dentist)}>
    <div class="form-group">
      <input 
        type="text" 
        id="name" 
        name="name" 
        placeholder="Full Name" 
        required 
      />
      <div class="error-message" id="name-error"></div>
    </div>
    
    <div class="form-row">
      <div class="form-group">
        <input 
          type="email" 
          id="email" 
          name="email" 
          placeholder="Email Address" 
          required 
        />
        <div class="error-message" id="email-error"></div>
      </div>
      
      <div class="form-group">
        <input 
          type="tel" 
          id="phone" 
          name="phone" 
          placeholder="Phone Number" 
          required 
        />
        <div class="error-message" id="phone-error"></div>
      </div>
    </div>
    
    <div class="form-group">
      <textarea 
        id="message" 
        name="message" 
        rows="3" 
        placeholder="Optional message or special requests"
      ></textarea>
      <div class="error-message" id="message-error"></div>
    </div>
    
    <input type="hidden" name="timestamp" id="timestamp" />
    
    <button type="submit" class="submit-button">
      <span class="button-text">Book Appointment</span>
      <span class="loading-spinner"></span>
    </button>
  </form>
</div>

<style>
  .lead-form-container {
    background: white;
    padding: 1rem 2rem;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
  }

  .contact-form-title {
    margin-top: 0;
  }

  .contact-form-subtitle {
    font-size: large;
    margin-bottom: 1rem;
    font-style: italic;
  }

  /* .form-row {
    display: grid;
    gap: 1rem;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    margin-bottom: 1.5rem;
  } */

  .form-group {
    margin-bottom: 1rem;
  }

  .form-group input,
  .form-group textarea {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid #ddd;
    border-radius: 8px;
    font-size: 1rem;
    transition: all 0.2s;
    background: #f8f9fa;
  }

  .form-group input::placeholder,
  .form-group textarea::placeholder {
    color: #666;
    opacity: 1;
  }

  .form-group input:focus,
  .form-group textarea:focus {
    border-color: #007bff;
    outline: none;
    background: white;
    box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);
  }

  .form-group textarea {
    min-height: 100px;
    resize: vertical;
  }

  .contact-method {
    display: flex;
    gap: 1rem;
    margin-top: 0.5rem;
  }

  .error-message {
    color: #dc3545;
    font-size: 0.875rem;
    margin-top: 0.25rem;
    display: none;
  }

  .submit-button {
    position: relative;
    background: #007bff;
    color: white;
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 1rem;
    transition: background 0.2s;
    width: 100%;
  }

  .submit-button:hover {
    background: #0056b3;
  }

  .loading-spinner {
    display: none;
    position: absolute;
    right: 1rem;
    top: 50%;
    transform: translateY(-50%);
    width: 1rem;
    height: 1rem;
    border: 2px solid #fff;
    border-top-color: transparent;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    to { transform: rotate(360deg); }
  }

  .submit-button.loading .button-text {
    visibility: hidden;
  }

  .submit-button.loading .loading-spinner {
    display: block;
  }
</style>

<script>
interface Dentist {
  name: string;
  email: string;
}

const formId = 'lead-form';

document.addEventListener('DOMContentLoaded', () => {
  const form = document.getElementById(formId);
  if (!form) {
    console.error('Form element not found');
    return;
  }
  
  let dentist: Dentist = { name: '', email: '' };
  try {
    if (form.dataset.dentist) {
      const parsedDentist = JSON.parse(form.dataset.dentist);
      if (typeof parsedDentist === 'object' &&
          typeof parsedDentist.name === 'string' &&
          typeof parsedDentist.email === 'string') {
        dentist = parsedDentist;
      }
    }
  } catch (error) {
    console.error('Error parsing dentist data:', error);
  }
  if (!(form instanceof HTMLFormElement)) {
    console.error('Form element not found');
    return;
  }

  const timestampInput = document.getElementById('timestamp');
  if (!(timestampInput instanceof HTMLInputElement)) {
    console.error('Timestamp input not found');
    return;
  }

  const handleSubmit = async (event: Event) => {
    event.preventDefault();
    
    // Add loading state
    const submitButton = form.querySelector<HTMLButtonElement>('button[type="submit"]');
    if (submitButton) {
      submitButton.classList.add('loading');
      submitButton.disabled = true;
    }

    timestampInput.value = new Date().toISOString();

    const formData = new FormData(form);
    const data = Object.fromEntries(formData.entries());

    // Transform data to match API format
    const transformedData = {
      name: data.name, // form submitter's name
      email: data.email, // form submitter's email
      phone: data.phone,
      status: 'new', // default status
      notes: data.message || '', // map message to notes
      type_id: 1, // fixed value for dentist leads
      message: data.message || '',
      contact_name: dentist.name, // use dentist's name from props
      contact_email: dentist.email // use dentist's email from props
    };

     
    const apiUrl = import.meta.env.PUBLIC_API_URL || 'http://localhost:3002';
    console.log(apiUrl)
    try {
      const response = await fetch(apiUrl + '/api/leads/external', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
        body: JSON.stringify(transformedData)
      });

      const responseData = await response.json();
      
      if (!response.ok) {
        throw new Error(responseData.message || 'Failed to submit form');
      }

      alert('Thank you! Your message has been sent.');
      form.reset();
    } catch (error) {
      console.error('Error:', error);
      alert(`Error: ${error.message || 'There was an error submitting your form. Please try again.'}`);
    } finally {
      // Remove loading state
      if (submitButton) {
        submitButton.classList.remove('loading');
        submitButton.disabled = false;
      }
    }
  };

  form.addEventListener('submit', handleSubmit);
});
</script>
